// ðŸ—¿ KEYSTONE AI AVATAR - TIMELESS GEOMETRIC DESIGN
// Professional, domain-aware avatar that will never look dated

import React, { useState, useEffect } from 'react';
import { useDomain } from '@/hooks/useDomain';

// =============================================================================
// 1. KEYSTONE AVATAR COMPONENT
// =============================================================================

interface KeystoneAvatarProps {
  state?: 'idle' | 'thinking' | 'speaking' | 'success' | 'error' | 'celebrating';
  size?: 'small' | 'medium' | 'large';
  domain?: 'education' | 'business' | 'coaches';
  showPulse?: boolean;
  className?: string;
}

export function KeystoneAvatar({ 
  state = 'idle', 
  size = 'medium', 
  domain,
  showPulse = true,
  className = '' 
}: KeystoneAvatarProps) {
  const { config } = useDomain();
  const avatarDomain = domain || (config?.type || 'education');
  
  // Size configurations
  const sizes = {
    small: { width: 32, height: 36, strokeWidth: 1 },
    medium: { width: 48, height: 54, strokeWidth: 1.5 },
    large: { width: 72, height: 81, strokeWidth: 2 }
  };
  
  const { width, height, strokeWidth } = sizes[size];
  
  // Domain-specific color schemes
  const domainColors = {
    education: {
      primary: '#059669', // green-600
      secondary: '#10b981', // green-500
      accent: '#34d399', // green-400
      glow: '#6ee7b7' // green-300
    },
    business: {
      primary: '#3b82f6', // blue-500
      secondary: '#6366f1', // indigo-500
      accent: '#8b5cf6', // violet-500
      glow: '#a78bfa' // violet-400
    },
    coaches: {
      primary: '#8b5cf6', // violet-500
      secondary: '#d946ef', // fuchsia-500
      accent: '#f97316', // orange-500
      glow: '#fbbf24' // amber-400
    }
  };
  
  const colors = domainColors[avatarDomain as keyof typeof domainColors] || domainColors.education;
  
  // Animation classes based on state
  const getAnimationClass = () => {
    switch (state) {
      case 'thinking':
        return 'animate-pulse';
      case 'speaking':
        return 'animate-bounce';
      case 'success':
        return 'animate-ping';
      case 'celebrating':
        return 'animate-spin';
      case 'error':
        return 'animate-pulse';
      default:
        return showPulse ? 'animate-pulse' : '';
    }
  };
  
  return (
    <div className={`inline-flex items-center justify-center ${className}`}>
      <div className="relative">
        {/* Glow effect for special states */}
        {(state === 'success' || state === 'celebrating') && (
          <div 
            className="absolute inset-0 rounded-full blur-md opacity-75 animate-ping"
            style={{ backgroundColor: colors.glow }}
          />
        )}
        
        {/* Main Keystone SVG */}
        <svg
          width={width}
          height={height}
          viewBox="0 0 48 54"
          className={`${getAnimationClass()} transition-all duration-300 ease-in-out`}
          style={{ filter: state === 'error' ? 'hue-rotate(45deg)' : 'none' }}
        >
          {/* Gradient Definitions */}
          <defs>
            <linearGradient id={`keystoneGradient-${avatarDomain}`} x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor={colors.primary} />
              <stop offset="50%" stopColor={colors.secondary} />
              <stop offset="100%" stopColor={colors.accent} />
            </linearGradient>
            
            <linearGradient id={`keystoneGlow-${avatarDomain}`} x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" stopColor={colors.accent} stopOpacity="0.8" />
              <stop offset="100%" stopColor={colors.glow} stopOpacity="0.4" />
            </linearGradient>
            
            {/* Inner glow filter */}
            <filter id={`innerGlow-${avatarDomain}`}>
              <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
              <feMerge> 
                <feMergeNode in="coloredBlur"/>
                <feMergeNode in="SourceGraphic"/>
              </feMerge>
            </filter>
          </defs>
          
          {/* Keystone Shape - Classic architectural keystone */}
          <path
            d="M24 2 
               L40 18 
               L36 18 
               L36 48 
               L32 52 
               L16 52 
               L12 48 
               L12 18 
               L8 18 
               L24 2 Z"
            fill={`url(#keystoneGradient-${avatarDomain})`}
            stroke={colors.primary}
            strokeWidth={strokeWidth}
            filter={state === 'success' ? `url(#innerGlow-${avatarDomain})` : 'none'}
            className="transition-all duration-300"
          />
          
          {/* Inner highlight for depth */}
          <path
            d="M24 6 
               L36 18 
               L32 18 
               L32 46 
               L28 48 
               L20 48 
               L16 46 
               L16 18 
               L12 18 
               L24 6 Z"
            fill={`url(#keystoneGlow-${avatarDomain})`}
            opacity="0.6"
            className={state === 'thinking' ? 'animate-pulse' : ''}
          />
          
          {/* Face elements for personality */}
          {state !== 'idle' && (
            <>
              {/* Eyes */}
              <circle cx="20" cy="24" r="2" fill={colors.primary} opacity="0.8" />
              <circle cx="28" cy="24" r="2" fill={colors.primary} opacity="0.8" />
              
              {/* Expression based on state */}
              {state === 'success' && (
                <path
                  d="M18 32 Q24 38 30 32"
                  stroke={colors.primary}
                  strokeWidth="2"
                  fill="none"
                  strokeLinecap="round"
                />
              )}
              
              {state === 'thinking' && (
                <circle cx="24" cy="32" r="1" fill={colors.primary} opacity="0.6" />
              )}
              
              {state === 'error' && (
                <path
                  d="M18 36 Q24 30 30 36"
                  stroke={colors.primary}
                  strokeWidth="2"
                  fill="none"
                  strokeLinecap="round"
                />
              )}
            </>
          )}
        </svg>
        
        {/* Status indicator for different states */}
        {state === 'speaking' && (
          <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse" />
        )}
        
        {state === 'thinking' && (
          <div className="absolute -top-1 -right-1 w-2 h-2 bg-blue-400 rounded-full animate-ping" />
        )}
      </div>
    </div>
  );
}

// =============================================================================
// 2. AVATAR CHAT INTERFACE COMPONENT
// =============================================================================

interface AvatarChatProps {
  message: string;
  isTyping?: boolean;
  avatarState?: 'idle' | 'thinking' | 'speaking' | 'success' | 'error';
  domain?: 'education' | 'business' | 'coaches';
  showAvatar?: boolean;
}

export function AvatarChatMessage({ 
  message, 
  isTyping = false, 
  avatarState = 'speaking',
  domain,
  showAvatar = true 
}: AvatarChatProps) {
  const [displayedMessage, setDisplayedMessage] = useState('');
  const [currentState, setCurrentState] = useState<'thinking' | 'speaking' | 'idle'>('thinking');
  
  // Typewriter effect
  useEffect(() => {
    if (!message) return;
    
    setCurrentState('thinking');
    const thinkingDelay = setTimeout(() => {
      setCurrentState('speaking');
      
      let index = 0;
      const typeInterval = setInterval(() => {
        if (index < message.length) {
          setDisplayedMessage(message.slice(0, index + 1));
          index++;
        } else {
          clearInterval(typeInterval);
          setCurrentState('idle');
        }
      }, 30); // Typing speed
      
      return () => clearInterval(typeInterval);
    }, 800); // Thinking delay
    
    return () => clearTimeout(thinkingDelay);
  }, [message]);
  
  const domainGreetings = {
    education: "Hi! I'm Keystone AI, your educational tournament assistant.",
    business: "Hello! I'm Keystone AI, here to help with your professional tournaments.",
    coaches: "Hey there! I'm Keystone AI, your community tournament companion."
  };
  
  return (
    <div className="flex items-start gap-3 p-4 bg-white rounded-lg shadow-sm border">
      {showAvatar && (
        <div className="flex-shrink-0">
          <KeystoneAvatar 
            state={currentState} 
            size="medium" 
            domain={domain}
            showPulse={currentState === 'thinking'}
          />
        </div>
      )}
      
      <div className="flex-1 min-w-0">
        <div className="flex items-center gap-2 mb-1">
          <span className="font-semibold text-gray-900">Keystone AI</span>
          <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
            Tournament Assistant
          </span>
        </div>
        
        <div className="text-gray-700 leading-relaxed">
          {currentState === 'thinking' ? (
            <div className="flex items-center gap-1 text-gray-500">
              <span>Thinking</span>
              <div className="flex gap-1">
                <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                <div className="w-1 h-1 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
              </div>
            </div>
          ) : (
            <span>{displayedMessage}</span>
          )}
        </div>
      </div>
    </div>
  );
}

// =============================================================================
// 3. AVATAR PREFERENCE SETTINGS COMPONENT
// =============================================================================

export function AvatarPreferenceSettings() {
  const [avatarEnabled, setAvatarEnabled] = useState(true);
  const [previewState, setPreviewState] = useState<'idle' | 'thinking' | 'speaking' | 'success'>('idle');
  const { config } = useDomain();
  
  const domain = config?.type || 'education';
  
  const handlePreviewState = (state: typeof previewState) => {
    setPreviewState(state);
    setTimeout(() => setPreviewState('idle'), 2000);
  };
  
  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg border">
      <h3 className="text-lg font-semibold text-gray-900 mb-4">Avatar Preferences</h3>
      
      {/* Avatar Toggle */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <label className="text-sm font-medium text-gray-700">Enable Avatar</label>
          <p className="text-xs text-gray-500">Show Keystone AI's visual personality</p>
        </div>
        <button
          onClick={() => setAvatarEnabled(!avatarEnabled)}
          className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
            avatarEnabled ? 'bg-blue-600' : 'bg-gray-200'
          }`}
        >
          <span
            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
              avatarEnabled ? 'translate-x-6' : 'translate-x-1'
            }`}
          />
        </button>
      </div>
      
      {/* Avatar Preview */}
      {avatarEnabled && (
        <div className="space-y-4">
          <div className="text-center">
            <p className="text-sm font-medium text-gray-700 mb-3">Preview</p>
            <KeystoneAvatar 
              state={previewState} 
              size="large" 
              domain={domain as any}
            />
          </div>
          
          {/* State Demo Buttons */}
          <div className="flex flex-wrap gap-2 justify-center">
            <button
              onClick={() => handlePreviewState('thinking')}
              className="px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition-colors"
            >
              Thinking
            </button>
            <button
              onClick={() => handlePreviewState('speaking')}
              className="px-3 py-1 text-xs bg-green-100 text-green-700 rounded-full hover:bg-green-200 transition-colors"
            >
              Speaking
            </button>
            <button
              onClick={() => handlePreviewState('success')}
              className="px-3 py-1 text-xs bg-yellow-100 text-yellow-700 rounded-full hover:bg-yellow-200 transition-colors"
            >
              Success
            </button>
          </div>
          
          <div className="text-center">
            <p className="text-xs text-gray-500">
              Domain: {domain.charAt(0).toUpperCase() + domain.slice(1)} Theme
            </p>
          </div>
        </div>
      )}
      
      <div className="mt-6 pt-4 border-t">
        <button className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors">
          Save Preferences
        </button>
      </div>
    </div>
  );
}

// =============================================================================
// 4. USAGE EXAMPLES AND INTEGRATION
// =============================================================================

// Example usage in tournament setup
export function TournamentSetupWithAvatar() {
  const [currentStep, setCurrentStep] = useState(0);
  const [avatarEnabled, setAvatarEnabled] = useState(true);
  
  const setupMessages = [
    "Welcome! Let's set up your tournament. What sport are you organizing?",
    "Great choice! How many teams will be participating?",
    "Perfect! Would you like to enable registration fees for participants?",
    "Excellent! Your tournament is ready. Let me help you set up donations to fund your expenses."
  ];
  
  const avatarStates: Array<'speaking' | 'thinking' | 'success'> = ['speaking', 'thinking', 'speaking', 'success'];
  
  return (
    <div className="max-w-2xl mx-auto p-6 space-y-6">
      <h2 className="text-2xl font-bold text-gray-900">Tournament Setup</h2>
      
      {avatarEnabled && (
        <AvatarChatMessage
          message={setupMessages[currentStep]}
          avatarState={avatarStates[currentStep]}
          showAvatar={true}
        />
      )}
      
      <div className="flex justify-between">
        <button
          onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}
          disabled={currentStep === 0}
          className="px-4 py-2 text-gray-600 bg-gray-100 rounded-lg disabled:opacity-50"
        >
          Previous
        </button>
        <button
          onClick={() => setCurrentStep(Math.min(setupMessages.length - 1, currentStep + 1))}
          disabled={currentStep === setupMessages.length - 1}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg disabled:opacity-50"
        >
          Next
        </button>
      </div>
      
      <div className="flex items-center justify-center pt-4">
        <button
          onClick={() => setAvatarEnabled(!avatarEnabled)}
          className="text-sm text-gray-500 hover:text-gray-700"
        >
          {avatarEnabled ? 'ðŸ—¿ Hide Avatar' : 'ðŸ‘» Show Avatar'}
        </button>
      </div>
    </div>
  );
}

/*
KEYSTONE AVATAR DESIGN PRINCIPLES:

ðŸ—¿ TIMELESS ARCHITECTURE:
âœ… Geometric keystone shape - architectural foundation metaphor
âœ… Clean SVG design - scales perfectly, lightweight
âœ… No trendy elements - will look good in 10+ years
âœ… Professional without being cold

ðŸŽ¨ DOMAIN-AWARE DESIGN:
âœ… Education: Green tones (growth, learning, Champions for Change)
âœ… Business: Blue-purple gradient (professional, innovative)
âœ… Coaches: Purple-orange (energetic, community, fun)

âš¡ EXPRESSIVE ANIMATIONS:
âœ… Idle: Gentle breathing/glow
âœ… Thinking: Thoughtful pulse
âœ… Speaking: Rhythmic movement  
âœ… Success: Victory glow with ping animation
âœ… Error: Concerned tilt with hue shift

ðŸ”§ TECHNICAL FEATURES:
âœ… Pure CSS animations - smooth, performant
âœ… Optional personality elements (eyes, expressions)
âœ… Status indicators for different states
âœ… Typewriter effect for chat messages
âœ… User preference toggle

ðŸŽ¯ PERFECT FOR KEYSTONE AI:
âœ… Represents foundation/stability
âœ… Professional enough for districts
âœ… Friendly enough for community
âœ… Unique brand identity
âœ… Scalable design system

The Keystone Avatar embodies the platform's role as the foundational piece that holds tournament management together!
*/