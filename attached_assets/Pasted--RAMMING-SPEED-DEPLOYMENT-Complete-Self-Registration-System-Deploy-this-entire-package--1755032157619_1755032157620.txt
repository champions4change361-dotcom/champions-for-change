// ðŸš¢ RAMMING SPEED DEPLOYMENT - Complete Self-Registration System
// Deploy this entire package - database, routes, components, everything!

// =============================================================================
// 1. DATABASE SCHEMA ADDITIONS (Add to your shared/schema.ts)
// =============================================================================

// Add these to your existing schema file:
export const registrationRequests = pgTable("registration_requests", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  requestType: text("request_type", {
    enum: ["district_admin", "school_admin", "coach", "scorekeeper"]
  }).notNull(),
  firstName: varchar("first_name").notNull(),
  lastName: varchar("last_name").notNull(),
  email: varchar("email").notNull(),
  phone: varchar("phone"),
  position: varchar("position"),
  organizationName: varchar("organization_name").notNull(),
  organizationType: text("organization_type", {
    enum: ["school_district", "school", "club", "nonprofit"]
  }).notNull(),
  parentOrganization: varchar("parent_organization"),
  yearsExperience: integer("years_experience"),
  sportsInvolved: jsonb("sports_involved"),
  certifications: text("certifications"),
  references: jsonb("references"),
  requestReason: text("request_reason"),
  selectedTier: text("selected_tier", {
    enum: ["foundation", "champion", "enterprise"]
  }).default("foundation"),
  paymentMethod: text("payment_method", {
    enum: ["stripe", "check", "pending"]
  }).default("pending"),
  stripeSessionId: varchar("stripe_session_id"),
  status: text("status", {
    enum: ["pending", "approved", "rejected", "needs_info", "payment_pending"]
  }).default("pending"),
  reviewNotes: text("review_notes"),
  reviewedBy: varchar("reviewed_by"),
  reviewedAt: timestamp("reviewed_at"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const organizations = pgTable("organizations", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: varchar("name").notNull(),
  type: text("type", {
    enum: ["school_district", "school", "club", "nonprofit", "business"]
  }).notNull(),
  contactEmail: varchar("contact_email").notNull(),
  contactPhone: varchar("contact_phone"),
  address: text("address"),
  city: varchar("city"),
  state: varchar("state"),
  zipCode: varchar("zip_code"),
  website: varchar("website"),
  parentOrganizationId: varchar("parent_organization_id"),
  isVerified: boolean("is_verified").default(false),
  registrationStatus: text("registration_status", {
    enum: ["pending", "approved", "rejected", "inactive"]
  }).default("pending"),
  subscriptionTier: text("subscription_tier", {
    enum: ["foundation", "champion", "enterprise"]
  }).default("foundation"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// =============================================================================
// 2. LANDING PAGE SIGNUP SECTION (Add to your landing page component)
// =============================================================================

import React from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Check, Star, Zap } from 'lucide-react';
import { useDomain } from '@/hooks/useDomain';

export function SignupSection() {
  const { isSchoolSafe } = useDomain();
  
  if (!isSchoolSafe()) return null;
  
  const startRegistration = (tier: string) => {
    window.location.href = `/register?tier=${tier}`;
  };

  const tiers = [
    {
      name: 'Foundation',
      price: 'Free',
      description: 'Perfect for single schools and small tournaments',
      features: [
        'Up to 5 tournaments per month',
        'Basic bracket management',
        'Score tracking',
        'Email notifications',
        'Community support'
      ],
      tier: 'foundation',
      buttonColor: 'bg-blue-600 hover:bg-blue-700',
      popular: false
    },
    {
      name: 'Champion',
      price: '$29',
      period: '/month',
      description: 'Multi-school districts and advanced features',
      features: [
        'Unlimited tournaments',
        'Multi-school management',
        'Custom branding',
        'AI tournament suggestions',
        'Priority support',
        'Advanced analytics'
      ],
      tier: 'champion',
      buttonColor: 'bg-blue-600 hover:bg-blue-700',
      popular: true
    },
    {
      name: 'District Enterprise',
      price: 'Custom',
      description: 'White-label solution for large districts',
      features: [
        'Everything in Champion',
        'Custom domain',
        'White-label branding',
        'Multi-organization support',
        'Dedicated account manager',
        'Custom integrations'
      ],
      tier: 'enterprise',
      buttonColor: 'bg-green-600 hover:bg-green-700',
      popular: false
    }
  ];

  return (
    <section className="py-16 bg-gradient-to-br from-blue-50 to-indigo-100">
      <div className="max-w-7xl mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">
            Start Your Tournament Journey
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Join Champions for Change and help fund $2,600+ educational trips for students 
            while revolutionizing your tournament management
          </p>
        </div>
        
        <div className="grid md:grid-cols-3 gap-8">
          {tiers.map((tier) => (
            <Card key={tier.name} className={`relative ${tier.popular ? 'border-2 border-blue-500 shadow-xl' : 'border border-gray-200'}`}>
              {tier.popular && (
                <div className="absolute -top-4 left-1/2 transform -translate-x-1/2 bg-blue-500 text-white px-4 py-1 rounded-full text-sm font-semibold flex items-center gap-1">
                  <Star className="h-3 w-3" />
                  Most Popular
                </div>
              )}
              
              <CardHeader className="text-center pb-6">
                <CardTitle className="text-2xl font-bold mb-2">{tier.name}</CardTitle>
                <div className="mb-4">
                  <span className="text-4xl font-bold text-gray-900">{tier.price}</span>
                  {tier.period && <span className="text-lg text-gray-600">{tier.period}</span>}
                </div>
                <CardDescription className="text-base">{tier.description}</CardDescription>
              </CardHeader>
              
              <CardContent>
                <ul className="space-y-3 mb-8">
                  {tier.features.map((feature, idx) => (
                    <li key={idx} className="flex items-start gap-2">
                      <Check className="h-5 w-5 text-green-500 mt-0.5 flex-shrink-0" />
                      <span className="text-sm text-gray-700">{feature}</span>
                    </li>
                  ))}
                </ul>
                
                <Button 
                  onClick={() => startRegistration(tier.tier)}
                  className={`w-full ${tier.buttonColor} text-white`}
                  size="lg"
                >
                  {tier.tier === 'enterprise' ? 'Contact Sales' : 'Get Started'}
                </Button>
              </CardContent>
            </Card>
          ))}
        </div>
        
        <div className="text-center mt-12 bg-white rounded-lg p-6 shadow-md">
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            ðŸŽ“ Educational Mission First
          </h3>
          <p className="text-gray-600">
            Every subscription helps fund educational trips for Corpus Christi students. 
            We're Champions for Change - transforming athletic programs while supporting education.
          </p>
        </div>
      </div>
    </section>
  );
}

// =============================================================================
// 3. COMPLETE REGISTRATION FORM COMPONENT
// =============================================================================

import React, { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { CheckCircle, AlertCircle, CreditCard, FileText } from 'lucide-react';
import { useMutation } from '@tanstack/react-query';
import { loadStripe } from '@stripe/stripe-js';

const registrationSchema = z.object({
  requestType: z.enum(['district_admin', 'school_admin', 'coach', 'scorekeeper']),
  firstName: z.string().min(2, 'First name must be at least 2 characters'),
  lastName: z.string().min(2, 'Last name must be at least 2 characters'),
  email: z.string().email('Please enter a valid email address'),
  phone: z.string().optional(),
  position: z.string().min(2, 'Position/title is required'),
  organizationName: z.string().min(2, 'Organization name is required'),
  organizationType: z.enum(['school_district', 'school', 'club', 'nonprofit']),
  parentOrganization: z.string().optional(),
  yearsExperience: z.number().min(0).max(50).optional(),
  sportsInvolved: z.array(z.string()).min(1, 'Please select at least one sport'),
  certifications: z.string().optional(),
  references: z.array(z.object({
    name: z.string(),
    email: z.string().email(),
    phone: z.string().optional(),
    relationship: z.string()
  })).optional(),
  requestReason: z.string().min(10, 'Please explain why you need access (minimum 10 characters)'),
  selectedTier: z.enum(['foundation', 'champion', 'enterprise']),
  paymentMethod: z.enum(['stripe', 'check'])
});

type RegistrationForm = z.infer<typeof registrationSchema>;

export function RegistrationForm() {
  const [step, setStep] = useState(1);
  const [selectedSports, setSelectedSports] = useState<string[]>([]);
  const [references, setReferences] = useState([{ name: '', email: '', phone: '', relationship: '' }]);
  const [selectedTier, setSelectedTier] = useState<string>('foundation');
  const [paymentMethod, setPaymentMethod] = useState<'stripe' | 'check'>('stripe');

  // Get tier from URL params
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const tier = urlParams.get('tier');
    if (tier && ['foundation', 'champion', 'enterprise'].includes(tier)) {
      setSelectedTier(tier);
    }
  }, []);

  const form = useForm<RegistrationForm>({
    resolver: zodResolver(registrationSchema),
    defaultValues: {
      sportsInvolved: [],
      references: [],
      selectedTier: selectedTier as any,
      paymentMethod: 'stripe'
    }
  });

  const submitMutation = useMutation({
    mutationFn: async (data: RegistrationForm) => {
      const response = await fetch('/api/registration/request', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...data,
          sportsInvolved: selectedSports,
          references: references.filter(ref => ref.name && ref.email)
        })
      });
      
      if (!response.ok) throw new Error('Registration failed');
      return response.json();
    },
    onSuccess: async (data) => {
      if (paymentMethod === 'stripe' && selectedTier !== 'foundation') {
        // Redirect to Stripe checkout
        const stripe = await loadStripe(process.env.REACT_APP_STRIPE_PUBLISHABLE_KEY!);
        const response = await fetch('/api/payment/create-checkout-session', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            registrationId: data.requestId,
            tier: selectedTier,
            email: form.getValues('email')
          })
        });
        
        const session = await response.json();
        await stripe?.redirectToCheckout({ sessionId: session.id });
      } else {
        setStep(5); // Success step
      }
    },
    onError: (error) => {
      console.error('Registration submission failed:', error);
    }
  });

  const onSubmit = (data: RegistrationForm) => {
    submitMutation.mutate({
      ...data,
      selectedTier: selectedTier as any,
      paymentMethod,
      sportsInvolved: selectedSports,
      references: references.filter(ref => ref.name && ref.email)
    });
  };

  const roleDescriptions = {
    district_admin: {
      title: 'District Athletic Director',
      description: 'Oversee all athletic programs across multiple schools in your district.',
      requirements: ['District administrative role', 'Athletic program oversight', 'Multi-school coordination']
    },
    school_admin: {
      title: 'School Athletic Director', 
      description: 'Manage athletic programs for your specific school.',
      requirements: ['School administrative role', 'Athletic program management', 'Coach coordination']
    },
    coach: {
      title: 'Coach',
      description: 'Register teams, manage rosters, and participate in tournaments.',
      requirements: ['Coaching certification', 'Team management experience', 'School affiliation']
    },
    scorekeeper: {
      title: 'Scorekeeper/Judge',
      description: 'Update scores and results for assigned events.',
      requirements: ['Event scoring experience', 'Attention to detail', 'Reliability']
    }
  };

  const sports = [
    'Basketball', 'Soccer', 'Tennis', 'Track & Field', 'Swimming', 'Golf', 
    'Baseball', 'Softball', 'Volleyball', 'Football', 'Cross Country', 
    'Wrestling', 'Cheerleading', 'Other'
  ];

  const tierPricing = {
    foundation: { name: 'Foundation', price: 'Free', features: ['Up to 5 tournaments', 'Basic features'] },
    champion: { name: 'Champion', price: '$29/month', features: ['Unlimited tournaments', 'Advanced features'] },
    enterprise: { name: 'Enterprise', price: 'Custom', features: ['White-label solution', 'Dedicated support'] }
  };

  if (step === 5) {
    return (
      <Card className="max-w-2xl mx-auto">
        <CardHeader className="text-center">
          <CheckCircle className="h-16 w-16 text-green-500 mx-auto mb-4" />
          <CardTitle className="text-2xl text-green-700">Registration Submitted!</CardTitle>
          <CardDescription>
            {paymentMethod === 'check' 
              ? 'Your registration is pending payment confirmation.'
              : 'Your registration has been submitted successfully.'
            }
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription>
              <strong>What happens next:</strong>
              <ol className="list-decimal list-inside mt-2 space-y-1">
                <li>We'll review your request within 2-3 business days</li>
                {paymentMethod === 'check' && (
                  <li>Mail your check to: Champions for Change, [Address]</li>
                )}
                <li>You'll receive approval confirmation via email</li>
                <li>Access to your tournament dashboard will be activated</li>
              </ol>
            </AlertDescription>
          </Alert>
          
          <div className="bg-blue-50 p-4 rounded-lg">
            <h4 className="font-semibold text-blue-900 mb-2">Contact Information</h4>
            <p className="text-blue-800">
              ðŸ“§ <a href="mailto:champions4change361@gmail.com" className="underline">champions4change361@gmail.com</a><br />
              ðŸ“ž <a href="tel:3613001552" className="underline">361-300-1552</a>
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="mb-8 text-center">
        <h1 className="text-3xl font-bold mb-2">Join Champions for Change</h1>
        <p className="text-gray-600">Help fund $2,600+ educational trips for Corpus Christi students</p>
      </div>

      {/* Step Progress */}
      <div className="flex justify-center mb-8">
        <div className="flex items-center space-x-4">
          {[1, 2, 3, 4].map((stepNum) => (
            <div key={stepNum} className="flex items-center">
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                step >= stepNum ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-600'
              }`}>
                {stepNum}
              </div>
              {stepNum < 4 && <div className={`w-12 h-1 ${step > stepNum ? 'bg-blue-600' : 'bg-gray-200'}`} />}
            </div>
          ))}
        </div>
      </div>

      <form onSubmit={form.handleSubmit(onSubmit)}>
        {step === 1 && (
          <Card>
            <CardHeader>
              <CardTitle>Step 1: Choose Your Role</CardTitle>
              <CardDescription>Select your position and responsibilities</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {Object.entries(roleDescriptions).map(([role, info]) => (
                  <div 
                    key={role}
                    className={`p-4 border rounded-lg cursor-pointer transition-all ${
                      form.watch('requestType') === role 
                        ? 'border-blue-500 bg-blue-50' 
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => form.setValue('requestType', role as any)}
                  >
                    <h3 className="font-semibold text-lg mb-2">{info.title}</h3>
                    <p className="text-gray-600 text-sm mb-3">{info.description}</p>
                    <ul className="text-xs text-gray-600 space-y-1">
                      {info.requirements.map((req, idx) => (
                        <li key={idx}>â€¢ {req}</li>
                      ))}
                    </ul>
                  </div>
                ))}
              </div>
              
              <div className="flex justify-end">
                <Button 
                  type="button" 
                  onClick={() => setStep(2)}
                  disabled={!form.watch('requestType')}
                >
                  Continue
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {step === 2 && (
          <Card>
            <CardHeader>
              <CardTitle>Step 2: Personal & Organization Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>First Name *</Label>
                  <Input {...form.register('firstName')} />
                  {form.formState.errors.firstName && (
                    <p className="text-red-500 text-sm mt-1">{form.formState.errors.firstName.message}</p>
                  )}
                </div>
                
                <div>
                  <Label>Last Name *</Label>
                  <Input {...form.register('lastName')} />
                  {form.formState.errors.lastName && (
                    <p className="text-red-500 text-sm mt-1">{form.formState.errors.lastName.message}</p>
                  )}
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>Email Address *</Label>
                  <Input type="email" {...form.register('email')} />
                  {form.formState.errors.email && (
                    <p className="text-red-500 text-sm mt-1">{form.formState.errors.email.message}</p>
                  )}
                </div>
                
                <div>
                  <Label>Phone Number</Label>
                  <Input {...form.register('phone')} />
                </div>
              </div>

              <div>
                <Label>Position/Title *</Label>
                <Input {...form.register('position')} placeholder="e.g., Athletic Director, Head Coach" />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>Organization Name *</Label>
                  <Input {...form.register('organizationName')} placeholder="e.g., Robert Driscoll Middle School" />
                </div>
                
                <div>
                  <Label>Organization Type *</Label>
                  <Select onValueChange={(value) => form.setValue('organizationType', value as any)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="school_district">School District</SelectItem>
                      <SelectItem value="school">School</SelectItem>
                      <SelectItem value="club">Club/Organization</SelectItem>
                      <SelectItem value="nonprofit">Nonprofit</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="flex justify-between">
                <Button type="button" variant="outline" onClick={() => setStep(1)}>Back</Button>
                <Button type="button" onClick={() => setStep(3)}>Continue</Button>
              </div>
            </CardContent>
          </Card>
        )}

        {step === 3 && (
          <Card>
            <CardHeader>
              <CardTitle>Step 3: Experience & Sports</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <Label>Sports Involved *</Label>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3 mt-2">
                  {sports.map((sport) => (
                    <label key={sport} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={selectedSports.includes(sport)}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setSelectedSports([...selectedSports, sport]);
                          } else {
                            setSelectedSports(selectedSports.filter(s => s !== sport));
                          }
                        }}
                      />
                      <span className="text-sm">{sport}</span>
                    </label>
                  ))}
                </div>
              </div>

              <div>
                <Label>Why do you need access? *</Label>
                <Textarea 
                  {...form.register('requestReason')} 
                  placeholder="Explain how you'll use the platform to benefit your students..."
                  rows={4}
                />
              </div>

              <div className="flex justify-between">
                <Button type="button" variant="outline" onClick={() => setStep(2)}>Back</Button>
                <Button type="button" onClick={() => setStep(4)}>Continue</Button>
              </div>
            </CardContent>
          </Card>
        )}

        {step === 4 && (
          <Card>
            <CardHeader>
              <CardTitle>Step 4: Plan & Payment</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Plan Selection */}
              <div>
                <Label className="text-lg font-semibold mb-4 block">Choose Your Plan</Label>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  {Object.entries(tierPricing).map(([tier, info]) => (
                    <div 
                      key={tier}
                      className={`p-4 border rounded-lg cursor-pointer ${
                        selectedTier === tier ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
                      }`}
                      onClick={() => setSelectedTier(tier)}
                    >
                      <h3 className="font-semibold">{info.name}</h3>
                      <p className="text-lg font-bold">{info.price}</p>
                      <ul className="text-xs mt-2 space-y-1">
                        {info.features.map((feature, idx) => (
                          <li key={idx}>â€¢ {feature}</li>
                        ))}
                      </ul>
                    </div>
                  ))}
                </div>
              </div>

              {/* Payment Method */}
              {selectedTier !== 'foundation' && (
                <div>
                  <Label className="text-lg font-semibold mb-4 block">Payment Method</Label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div 
                      className={`p-4 border rounded-lg cursor-pointer flex items-center gap-3 ${
                        paymentMethod === 'stripe' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
                      }`}
                      onClick={() => setPaymentMethod('stripe')}
                    >
                      <CreditCard className="h-5 w-5" />
                      <div>
                        <h3 className="font-semibold">Credit Card</h3>
                        <p className="text-sm text-gray-600">Instant activation</p>
                      </div>
                    </div>
                    
                    <div 
                      className={`p-4 border rounded-lg cursor-pointer flex items-center gap-3 ${
                        paymentMethod === 'check' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'
                      }`}
                      onClick={() => setPaymentMethod('check')}
                    >
                      <FileText className="h-5 w-5" />
                      <div>
                        <h3 className="font-semibold">Check Payment</h3>
                        <p className="text-sm text-gray-600">Manual processing</p>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              <div className="flex justify-between">
                <Button type="button" variant="outline" onClick={() => setStep(3)}>Back</Button>
                <Button 
                  type="submit" 
                  disabled={submitMutation.isPending}
                  className="bg-green-600 hover:bg-green-700"
                >
                  {submitMutation.isPending ? 'Processing...' : 
                   paymentMethod === 'stripe' && selectedTier !== 'foundation' ? 'Continue to Payment' : 
                   'Submit Registration'}
                </Button>
              </div>
            </CardContent>
          </Card>
        )}
      </form>
    </div>
  );
}

// =============================================================================
// 4. SERVER ROUTES (Add to your server/routes.ts)
// =============================================================================

// Registration API endpoints
app.post("/api/registration/request", async (req, res) => {
  try {
    const storage = await getStorage();
    const requestData = req.body;
    
    const request = await storage.insert('registration_requests', {
      ...requestData,
      id: crypto.randomUUID(),
      status: 'pending',
      createdAt: new Date(),
      updatedAt: new Date()
    });
    
    res.status(201).json({
      success: true,
      message: "Registration request submitted successfully",
      requestId: request.id
    });
  } catch (error) {
    console.error("Registration request error:", error);
    res.status(500).json({ 
      success: false,
      message: "Failed to submit registration request" 
    });
  }
});

// Stripe checkout session creation
app.post("/api/payment/create-checkout-session", async (req, res) => {
  try {
    const { registrationId, tier, email } = req.body;
    
    const priceIds = {
      champion: 'price_champion_monthly', // Replace with your Stripe price IDs
      enterprise: 'price_enterprise_custom'
    };
    
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [
        {
          price: priceIds[tier as keyof typeof priceIds],
          quantity: 1,
        },
      ],
      mode: 'subscription',
      success_url: `${req.headers.origin}/registration/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${req.headers.origin}/register?tier=${tier}`,
      customer_email: email,
      metadata: {
        registrationId,
        tier
      }
    });

    res.json({ id: session.id });