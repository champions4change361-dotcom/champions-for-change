import { queryClient } from “./lib/queryClient”;
import { QueryClientProvider } from “@tanstack/react-query”;
import { Toaster } from “@/components/ui/toaster”;
import { TooltipProvider } from “@/components/ui/tooltip”;
import { Switch, Route, Router, useLocation } from “wouter”;
import { useAuth } from “@/hooks/useAuth”;
import { useDomain } from “@/hooks/useDomain”;
import { useTeamLinking } from “@/hooks/useTeamLinking”;
import { lazy, Suspense } from “react”;
import DomainNavigation from “@/components/DomainNavigation”;
import ChampionsBanner from ‘./components/ChampionsBanner’;

// Lazy load heavy components
const FantasyDashboard = lazy(() => import(’./pages/FantasyDashboard’));
const TournamentEmpire = lazy(() => import(’./pages/TournamentEmpire’));
const AdvancedPageBuilder = lazy(() => import(’./pages/AdvancedPageBuilder’));

// Lightweight components - import normally
import Home from ‘./pages/Home’;
import Landing from ‘./pages/Landing’;
import EducationHubLanding from ‘./pages/EducationHubLanding’;
import TrantorLanding from ‘./pages/TrantorLanding’;
import SmartSignup from ‘./pages/SmartSignup’;
import UnifiedLogin from ‘./pages/UnifiedLogin’;

// Route aliases for cleaner URLs
const ROUTE_ALIASES = {
‘/athletic-trainer’: ‘/athletic-trainer-dashboard’,
‘/scorekeeper’: ‘/scorekeeper-dashboard’,
‘/parent’: ‘/parent-dashboard’,
‘/register’: ‘/smart-signup’,
‘/business-register’: ‘/smart-signup?type=business’,
‘/signup’: ‘/smart-signup’
};

// Route configuration for easier management
const ROUTE_CONFIG = {
// Public routes - no auth required
public: [
{ path: ‘/trial-signup’, component: lazy(() => import(’./pages/TrialSignup’)) },
{ path: ‘/team-signup’, component: lazy(() => import(’./pages/TeamSignupPage’)) },
{ path: ‘/pricing’, component: lazy(() => import(’./pages/Pricing’)) },
{ path: ‘/capabilities’, component: lazy(() => import(’./pages/Capabilities’)) },
{ path: ‘/privacy’, component: lazy(() => import(’./pages/PrivacyPolicy’)) },
{ path: ‘/terms’, component: lazy(() => import(’./pages/TermsOfService’)) },
{ path: ‘/refund-policy’, component: lazy(() => import(’./pages/RefundPolicy’)) },
{ path: ‘/compliance’, component: lazy(() => import(’./pages/Compliance’)) },
{ path: ‘/smart-signup’, component: SmartSignup },
{ path: ‘/login’, component: UnifiedLogin },
{ path: ‘/forgot-password’, component: lazy(() => import(’./pages/ForgotPassword’)) },
{ path: ‘/reset-password’, component: lazy(() => import(’./pages/ResetPassword’)) }
],

// Fantasy routes - require fantasy feature
fantasy: [
{ path: ‘/fantasy’, component: FantasyDashboard, requiresAuth: true },
{ path: ‘/fantasy-tournaments’, component: lazy(() => import(’./pages/FantasyTournaments’)) },
{ path: ‘/fantasy-coaching’, component: lazy(() => import(’./pages/FantasyCoaching’)) },
{ path: ‘/fantasy/league/:id’, component: lazy(() => import(’./pages/LeagueDashboard’)), requiresAuth: true },
{ path: ‘/fantasy/league/:id/settings’, component: lazy(() => import(’./pages/LeagueSettings’)), requiresAuth: true },
{ path: ‘/coaches-lounge’, component: lazy(() => import(’./pages/CoachesLoungeLanding’)) },
{ path: ‘/commissioner’, component: lazy(() => import(’./pages/CommissionerDashboard’)), requiresAuth: true }
],

// Tournament routes
tournaments: [
{ path: ‘/tournaments’, component: lazy(() => import(’./pages/tournaments’)), requiresAuth: true },
{ path: ‘/tournaments/:id’, component: lazy(() => import(’./pages/tournament-detail’)), requiresAuth: true },
{ path: ‘/tournaments/:id/edit’, component: lazy(() => import(’./pages/tournament-edit’)), requiresAuth: true },
{ path: ‘/tournament/:id’, component: lazy(() => import(’./pages/tournament’)), requiresAuth: true },
{ path: ‘/create’, component: lazy(() => import(’./pages/CreateTournament’)), requiresAuth: true },
{ path: ‘/drafts’, component: lazy(() => import(’./pages/drafts’)), requiresAuth: true }
],

// Admin routes - require admin role
admin: [
{ path: ‘/admin’, component: lazy(() => import(’./pages/AdminManagement’)), roles: [‘admin’, ‘super_admin’] },
{ path: ‘/admin/approvals’, component: lazy(() => import(’./pages/AdminApprovals’)), roles: [‘admin’, ‘super_admin’] },
{ path: ‘/admin-role-management’, component: lazy(() => import(’./pages/AdminRoleManagement’)), roles: [‘admin’, ‘super_admin’] }
]
};

function LoadingSpinner() {
return (
<div className="min-h-screen bg-gradient-to-br from-blue-50 to-slate-50 flex items-center justify-center">
<div className="text-center">
<div className="w-12 h-12 border-3 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-3"></div>
<p className="text-slate-600 text-base">Loading…</p>
</div>
</div>
);
}

function ProtectedRoute({ component: Component, roles, requiresAuth = false, …props }) {
const { isAuthenticated, user } = useAuth();
const [, setLocation] = useLocation();

if (requiresAuth && !isAuthenticated) {
setLocation(’/login’);
return null;
}

if (roles && (!user || !roles.includes(user.role))) {
setLocation(’/unauthorized’);
return null;
}

return <Route {…props} component={Component} />;
}

function RouteRedirect({ from, to }) {
const [, setLocation] = useLocation();

return (
<Route path={from}>
{() => {
setLocation(to);
return null;
}}
</Route>
);
}

function renderRoutes(routes, isFeatureEnabled, isAuthenticated) {
return routes.map(route => {
// Skip if auth required but not authenticated
if (route.requiresAuth && !isAuthenticated) return null;

```
return (
  <Suspense key={route.path} fallback={<LoadingSpinner />}>
    <ProtectedRoute
      path={route.path}
      component={route.component}
      roles={route.roles}
      requiresAuth={route.requiresAuth}
    />
  </Suspense>
);
```

});
}

function getDomainBackgroundClass(brand: string) {
const backgrounds = {
‘COMPETITIVE_EDUCATION_HUB’: “min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-indigo-900”,
‘TRANTOR_TOURNAMENTS’: “min-h-screen bg-gradient-to-br from-orange-900 via-orange-800 to-red-900”,
‘COACHES_LOUNGE’: “min-h-screen bg-gradient-to-br from-purple-900 via-purple-800 to-indigo-900”
};

return backgrounds[brand] || “min-h-screen bg-gradient-to-br from-slate-50 to-slate-100”;
}

function AuthenticatedRoutes() {
const { isFeatureEnabled, isFantasyDomain, config } = useDomain();
const brandClass = config ? getDomainBackgroundClass(config.brand) : “min-h-screen bg-gradient-to-br from-blue-50 to-slate-50”;

return (
<div className={brandClass}>
<DomainNavigation />
<div className="pt-16 md:pt-12">
<Switch>
<Route path="/" component={Home} />

```
      {/* Tournament Routes */}
      {renderRoutes(ROUTE_CONFIG.tournaments, isFeatureEnabled, true)}
      
      {/* Fantasy Routes - Only if fantasy enabled */}
      {isFeatureEnabled('fantasyLeagues') && renderRoutes(ROUTE_CONFIG.fantasy, isFeatureEnabled, true)}
      
      {/* Team Management */}
      <Suspense fallback={<LoadingSpinner />}>
        <Route path="/teams" component={lazy(() => import('./pages/TeamListPage'))} />
        <Route path="/teams/create" component={lazy(() => import('./pages/TeamCreatePage'))} />
        <Route path="/teams/:id" component={lazy(() => import('./pages/TeamDashboardPage'))} />
      </Suspense>
      
      {/* Core App Routes */}
      <Suspense fallback={<LoadingSpinner />}>
        <Route path="/settings" component={lazy(() => import('./pages/Settings'))} />
        <Route path="/dashboard" component={lazy(() => import('./pages/RoleDashboard'))} />
        <Route path="/contacts" component={lazy(() => import('./pages/Contacts'))} />
      </Suspense>
      
      {/* Admin Routes */}
      {renderRoutes(ROUTE_CONFIG.admin, isFeatureEnabled, true)}
      
      {/* Show Tournament Empire only for non-fantasy domains */}
      {!isFantasyDomain() && (
        <Suspense fallback={<LoadingSpinner />}>
          <Route path="/tournament-empire" component={TournamentEmpire} />
        </Suspense>
      )}
      
      {/* Fallback to Home */}
      <Route component={Home} />
    </Switch>
  </div>
</div>
```

);
}

function AppRouter() {
const { isAuthenticated, isLoading } = useAuth();
const { config, isSchoolDomain } = useDomain();

useTeamLinking();

const allowGuestAccess = isSchoolDomain();

if (isLoading && !config) {
return <LoadingSpinner />;
}

return (
<>
<ChampionsBanner />
<Switch>
{/* Route Aliases */}
{Object.entries(ROUTE_ALIASES).map(([from, to]) => (
<RouteRedirect key={from} from={from} to={to} />
))}

```
    {/* Public Routes */}
    <Suspense fallback={<LoadingSpinner />}>
      {renderRoutes(ROUTE_CONFIG.public, () => true, isAuthenticated)}
    </Suspense>
    
    {/* Fantasy Routes - Available to all for demo purposes */}
    <Suspense fallback={<LoadingSpinner />}>
      {renderRoutes(ROUTE_CONFIG.fantasy.filter(r => !r.requiresAuth), () => true, isAuthenticated)}
    </Suspense>
    
    {/* Public Tournament Routes */}
    <Suspense fallback={<LoadingSpinner />}>
      <Route path="/embed/tournament/:id" component={lazy(() => import('./pages/EmbedTournament'))} />
      <Route path="/local-tournaments" component={lazy(() => import('./pages/LocalTournaments'))} />
      <Route path="/tournament-calendar" component={lazy(() => import('./pages/TournamentCalendar'))} />
    </Suspense>
    
    {/* Landing Pages */}
    {(!isAuthenticated || allowGuestAccess) && (
      <Route path="/">
        {config?.brand === 'COMPETITIVE_EDUCATION_HUB' ? (
          <EducationHubLanding />
        ) : config?.brand === 'TRANTOR_TOURNAMENTS' ? (
          <TrantorLanding />
        ) : (
          <div className={config ? getDomainBackgroundClass(config.brand) : "min-h-screen bg-gradient-to-br from-blue-50 to-slate-50"}>
            <Landing />
          </div>
        )}
      </Route>
    )}
    
    {/* Authenticated Routes */}
    {isAuthenticated && <AuthenticatedRoutes />}
    
    {/* Fallback */}
    <Route>
      {config?.brand === 'COMPETITIVE_EDUCATION_HUB' ? (
        <EducationHubLanding />
      ) : config?.brand === 'TRANTOR_TOURNAMENTS' ? (
        <TrantorLanding />
      ) : (
        <div className={config ? getDomainBackgroundClass(config.brand) : "min-h-screen bg-gradient-to-br from-blue-50 to-slate-50"}>
          <Landing />
        </div>
      )}
    </Route>
  </Switch>
</>
```

);
}

function App() {
return (
<QueryClientProvider client={queryClient}>
<TooltipProvider>
<Router>
<AppRouter />
</Router>
<Toaster />
</TooltipProvider>
</QueryClientProvider>
);
}

export default App;