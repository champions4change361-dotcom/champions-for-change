// ðŸ¤– AI DATABASE INTEGRATION - USING EXISTING SCHEMA
// Smart AI that references live tournament data for contextual help

// =============================================================================
// 1. ENHANCED SCHEMA FOR AI CONTEXT
// =============================================================================

import { sql } from "drizzle-orm";
import { pgTable, text, varchar, integer, jsonb, timestamp, boolean } from "drizzle-orm/pg-core";

// Add AI fields to existing tournament table
export const tournaments = pgTable("tournaments", {
  // ... all existing tournament fields
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: varchar("name").notNull(),
  organizerId: varchar("organizer_id").notNull(),
  
  // AI CONTEXT FIELDS
  aiSetupProgress: jsonb("ai_setup_progress").$type<{
    donationModuleStep: 'not_started' | 'suggested' | 'creating' | 'stripe_setup' | 'testing' | 'complete';
    stripeAccountStatus: 'unknown' | 'none' | 'creating' | 'has_account' | 'keys_added' | 'validated';
    lastAIInteraction: string; // ISO timestamp
    completedSteps: string[]; // Array of completed step IDs
    userResponses: Record<string, any>; // Store user's previous answers
  }>(),
  
  aiContext: jsonb("ai_context").$type<{
    userTechLevel: 'beginner' | 'intermediate' | 'advanced';
    preferredCommunicationStyle: 'detailed' | 'concise' | 'visual';
    hasAskedForHelp: boolean;
    previousQuestions: string[];
    successfulSetups: number; // How many times they've done this
  }>(),
  
  setupAssistanceLevel: text("setup_assistance_level", {
    enum: ["minimal", "standard", "full_guidance", "expert_mode"]
  }).default("standard"),
  
  // DONATION SETUP TRACKING
  donationSetupData: jsonb("donation_setup_data").$type<{
    goal: number;
    purpose: string;
    description: string;
    suggestedAmounts: number[];
    stripePublicKey?: string;
    stripeAccountId?: string;
    setupStartedAt?: string;
    setupCompletedAt?: string;
  }>(),
});

// Add AI preferences to user table
export const users = pgTable("users", {
  // ... all existing user fields
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  email: varchar("email").unique(),
  
  // AI PREFERENCE FIELDS
  aiPreferences: jsonb("ai_preferences").$type<{
    wantsProactiveHelp: boolean; // Should AI suggest improvements?
    communicationStyle: 'friendly' | 'professional' | 'technical';
    helpLevel: 'minimal' | 'guided' | 'comprehensive';
    hasCompletedOnboarding: boolean;
  }>().default({
    wantsProactiveHelp: true,
    communicationStyle: 'friendly',
    helpLevel: 'guided',
    hasCompletedOnboarding: false
  }),
  
  techSkillLevel: text("tech_skill_level", {
    enum: ["beginner", "intermediate", "advanced"]
  }).default("intermediate"),
  
  // LEARNING PROGRESS
  completedAITutorials: jsonb("completed_ai_tutorials").$type<string[]>().default([]),
  aiInteractionCount: integer("ai_interaction_count").default(0),
});

// =============================================================================
// 2. AI CONTEXT SERVICE
// =============================================================================

export class AIContextService {
  constructor(private storage: any) {}

  // Get comprehensive context for AI responses
  async getAIContext(userId: string, tournamentId?: string) {
    const user = await this.storage.getUser(userId);
    let tournament = null;
    let userTournaments = [];

    if (tournamentId) {
      tournament = await this.storage.getTournament(tournamentId);
    }

    // Get user's tournament history for context
    userTournaments = await this.storage.getUserTournaments(userId);

    return {
      user: {
        id: userId,
        subscriptionTier: user.subscriptionPlan || 'foundation',
        techSkillLevel: user.techSkillLevel || 'intermediate',
        aiPreferences: user.aiPreferences || {},
        completedTutorials: user.completedAITutorials || [],
        totalTournaments: userTournaments.length,
        successfulSetups: userTournaments.filter(t => t.donationsEnabled).length,
      },
      currentTournament: tournament ? {
        id: tournament.id,
        name: tournament.name,
        type: tournament.tournamentType,
        hasRegistrationFees: tournament.registrationFeeEnabled,
        hasDonations: tournament.donationsEnabled,
        aiSetupProgress: tournament.aiSetupProgress || {},
        donationSetupData: tournament.donationSetupData || {},
      } : null,
      history: {
        totalTournaments: userTournaments.length,
        tournamentsWithDonations: userTournaments.filter(t => t.donationsEnabled).length,
        averageDonationGoal: this.calculateAverageDonationGoal(userTournaments),
        commonSports: this.getCommonSports(userTournaments),
      }
    };
  }

  // Update AI progress tracking
  async updateAIProgress(tournamentId: string, progress: any) {
    await this.storage.updateTournament(tournamentId, {
      aiSetupProgress: progress,
      updatedAt: new Date()
    });
  }

  // Smart AI response generation based on context
  async generateContextualResponse(context: any, userQuestion: string): Promise<string> {
    const { user, currentTournament, history } = context;

    // Adjust response based on user's tech level
    const isBeginnerUser = user.techSkillLevel === 'beginner' || user.successfulSetups === 0;
    const isExperiencedUser = user.successfulSetups > 2;

    // Context-aware responses
    if (userQuestion.toLowerCase().includes('stripe')) {
      if (isBeginnerUser) {
        return `I'll walk you through Stripe step by step! Stripe is a payment processor that lets you accept donations safely. Since this is ${user.successfulSetups === 0 ? 'your first time' : 'still new to you'}, I'll give you detailed instructions with screenshots. Ready to start?`;
      } else if (isExperiencedUser) {
        return `I see you've set up donations ${user.successfulSetups} times before! Do you need your usual Stripe dashboard link, or are you running into a specific issue?`;
      }
    }

    if (userQuestion.toLowerCase().includes('donation goal')) {
      const avgGoal = context.history.averageDonationGoal;
      if (avgGoal > 0) {
        return `Based on your previous tournaments (average goal: $${avgGoal}), I'd suggest setting a goal between $${Math.round(avgGoal * 0.8)} and $${Math.round(avgGoal * 1.2)} for this ${currentTournament?.name || 'tournament'}. What are your main expenses this time?`;
      } else {
        return `For ${currentTournament?.type || 'this type of tournament'}, most organizers set goals between $250-500 for local events or $500-1500 for travel tournaments. What expenses are you trying to cover?`;
      }
    }

    // Default helpful response
    return `I'm here to help with your ${currentTournament?.name || 'tournament'} setup! I can assist with donation goals, Stripe setup, or campaign strategies. What would you like to work on?`;
  }

  private calculateAverageDonationGoal(tournaments: any[]): number {
    const tournamentsWithGoals = tournaments.filter(t => t.donationGoal > 0);
    if (tournamentsWithGoals.length === 0) return 0;
    
    const total = tournamentsWithGoals.reduce((sum, t) => sum + t.donationGoal, 0);
    return Math.round(total / tournamentsWithGoals.length);
  }

  private getCommonSports(tournaments: any[]): string[] {
    const sports: Record<string, number> = {};
    tournaments.forEach(t => {
      if (t.sport) {
        sports[t.sport] = (sports[t.sport] || 0) + 1;
      }
    });
    
    return Object.entries(sports)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3)
      .map(([sport]) => sport);
  }
}

// =============================================================================
// 3. ENHANCED AI CHAT API WITH DATABASE CONTEXT
// =============================================================================

// Updated API endpoint with full database context
app.post("/api/ai/contextual-help", async (req, res) => {
  try {
    const { userId, tournamentId, question, conversationHistory } = req.body;
    const storage = await getStorage();
    const aiContext = new AIContextService(storage);

    // Get comprehensive context
    const context = await aiContext.getAIContext(userId, tournamentId);
    
    // Generate contextual response
    const aiResponse = await aiContext.generateContextualResponse(context, question);
    
    // Update interaction tracking
    await storage.updateUser(userId, {
      aiInteractionCount: (context.user.totalInteractions || 0) + 1,
      updatedAt: new Date()
    });

    // Store conversation for context
    if (tournamentId) {
      const currentProgress = context.currentTournament?.aiSetupProgress || {};
      await aiContext.updateAIProgress(tournamentId, {
        ...currentProgress,
        lastAIInteraction: new Date().toISOString(),
        previousQuestions: [
          ...(currentProgress.previousQuestions || []).slice(-4), // Keep last 5
          question
        ]
      });
    }

    res.json({
      success: true,
      response: aiResponse,
      context: {
        userLevel: context.user.techSkillLevel,
        experienceLevel: context.user.successfulSetups > 2 ? 'experienced' : 'learning',
        suggestions: await this.generateSuggestions(context, question)
      }
    });

  } catch (error) {
    console.error("AI contextual help error:", error);
    res.status(500).json({
      success: false,
      message: "AI help temporarily unavailable",
      fallbackResponse: "I'm having trouble accessing your tournament data right now, but I'm still here to help! What specific question do you have about setting up donations or Stripe?"
    });
  }
});

// Proactive AI suggestions based on tournament state
app.get("/api/ai/proactive-suggestions/:tournamentId", async (req, res) => {
  try {
    const { tournamentId } = req.params;
    const { userId } = req.query;
    const storage = await getStorage();
    const aiContext = new AIContextService(storage);

    const context = await aiContext.getAIContext(userId as string, tournamentId);
    const suggestions = [];

    // Smart suggestions based on tournament state
    if (!context.currentTournament?.hasDonations) {
      suggestions.push({
        type: 'donation_setup',
        priority: 'high',
        title: 'Add Donation Module',
        message: `I noticed "${context.currentTournament?.name}" doesn't have donations enabled yet. Most ${context.currentTournament?.type} tournaments raise $${context.history.averageDonationGoal || 500}+ to help with expenses. Want me to set this up?`,
        action: 'setup_donations'
      });
    }

    if (!context.currentTournament?.hasRegistrationFees && context.user.subscriptionTier === 'foundation') {
      suggestions.push({
        type: 'revenue_optimization',
        priority: 'medium',
        title: 'Consider Registration Fees',
        message: 'Adding a small registration fee ($10-25) can help cover tournament costs and reduce your donation goal.',
        action: 'setup_registration_fees'
      });
    }

    res.json({
      success: true,
      suggestions: suggestions.slice(0, 2) // Max 2 suggestions to avoid overwhelm
    });

  } catch (error) {
    console.error("Proactive suggestions error:", error);
    res.json({ success: true, suggestions: [] }); // Fail gracefully
  }
});

/*
IMPLEMENTATION SUMMARY:

1. USES EXISTING DATABASE:
   âœ… No separate AI database needed
   âœ… AI context stored in tournament/user tables
   âœ… Real-time access to live data

2. SMART CONTEXT AWARENESS:
   âœ… Knows user's experience level
   âœ… References previous tournaments
   âœ… Adjusts help based on success history
   âœ… Tracks setup progress

3. CONTEXTUAL RESPONSES:
   âœ… "I see you've done this 3 times before..."
   âœ… "Based on your $500 average goal..."
   âœ… "Since this is your first time..."

4. PROACTIVE SUGGESTIONS:
   âœ… Suggests donation setup when missing
   âœ… Recommends registration fees
   âœ… Offers help based on tournament type

5. GRACEFUL DEGRADATION:
   âœ… Still works if context unavailable
   âœ… Fallback responses for errors
   âœ… Never breaks user experience

ANSWER: Use existing database with AI context fields - much simpler and more powerful! ðŸ¤–ðŸ’¾
*/