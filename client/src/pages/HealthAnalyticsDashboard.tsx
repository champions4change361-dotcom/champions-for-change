import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts";
import { 
  Shield, 
  AlertTriangle, 
  TrendingDown, 
  TrendingUp, 
  Heart, 
  Activity,
  Users,
  Calendar,
  Phone,
  AlertCircle,
  CheckCircle2
} from "lucide-react";

interface HealthAlert {
  alertId: string;
  alertType: 'performance_decline' | 'injury_risk' | 'fatigue_pattern' | 'unusual_behavior';
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  recommendedActions: string[];
  triggeredDate: string;
  resolvedDate?: string;
  resolvedBy?: string;
  notes?: string;
}

interface PerformanceTrend {
  eventType: string;
  sport: string;
  measurements: {
    date: string;
    value: number;
    unit: string;
    conditions?: string;
    notes?: string;
  }[];
  trendAnalysis: {
    direction: 'improving' | 'declining' | 'stable' | 'inconsistent';
    confidenceLevel: number;
    lastAnalyzedDate: string;
    concernLevel: 'none' | 'minor' | 'moderate' | 'significant';
    autoGeneratedRecommendations?: string[];
  };
}

interface AthleteHealthData {
  id: string;
  playerName: string;
  team: string;
  sport: string;
  healthAlerts: HealthAlert[];
  performanceTrends: PerformanceTrend[];
  lastCheckDate: string;
}

interface HealthAnalyticsProps {
  isCoachView?: boolean;
  teamId?: string;
}

export default function HealthAnalyticsDashboard({ isCoachView = false, teamId }: HealthAnalyticsProps) {
  const [selectedAthlete, setSelectedAthlete] = useState<string>("all");
  const [alertSeverity, setAlertSeverity] = useState<string>("all");
  const [showResolved, setShowResolved] = useState<boolean>(false);

  // Fetch health analytics data
  const { data: healthData, isLoading } = useQuery<AthleteHealthData[]>({
    queryKey: [`/api/health-analytics${teamId ? `/${teamId}` : ''}`, selectedAthlete, alertSeverity],
    enabled: isCoachView,
  });

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <AlertCircle className="h-4 w-4" />;
      case 'high': return <AlertTriangle className="h-4 w-4" />;
      case 'medium': return <Activity className="h-4 w-4" />;
      case 'low': return <Heart className="h-4 w-4" />;
      default: return <Shield className="h-4 w-4" />;
    }
  };

  const getTrendIcon = (direction: string) => {
    switch (direction) {
      case 'improving': return <TrendingUp className="h-4 w-4 text-green-600" />;
      case 'declining': return <TrendingDown className="h-4 w-4 text-red-600" />;
      case 'inconsistent': return <Activity className="h-4 w-4 text-yellow-600" />;
      default: return <Activity className="h-4 w-4 text-gray-600" />;
    }
  };

  const getActiveAlerts = () => {
    if (!healthData) return [];
    return healthData.flatMap(athlete => 
      athlete.healthAlerts.filter(alert => 
        !alert.resolvedDate && 
        (alertSeverity === 'all' || alert.severity === alertSeverity) &&
        (selectedAthlete === 'all' || athlete.id === selectedAthlete)
      )
    );
  };

  const getCriticalAthletes = () => {
    if (!healthData) return [];
    return healthData.filter(athlete => 
      athlete.healthAlerts.some(alert => 
        !alert.resolvedDate && (alert.severity === 'critical' || alert.severity === 'high')
      )
    );
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
        <div className="container mx-auto px-4 py-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {[1, 2, 3].map((i) => (
              <Card key={i} className="animate-pulse">
                <CardContent className="p-6">
                  <div className="h-4 bg-gray-300 dark:bg-gray-600 rounded w-3/4 mb-4"></div>
                  <div className="h-32 bg-gray-300 dark:bg-gray-600 rounded"></div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <Shield className="h-8 w-8 text-blue-600 dark:text-blue-400" />
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
              Health & Safety Analytics
            </h1>
          </div>
          <p className="text-gray-600 dark:text-gray-300 max-w-3xl">
            Monitor athlete performance trends to identify potential health concerns before they become serious issues. 
            Early detection of performance decline patterns can help coaches address unnoticed health conditions.
          </p>
        </div>

        {/* Critical Alerts Banner */}
        {getCriticalAthletes().length > 0 && (
          <Alert className="mb-8 border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/20">
            <AlertTriangle className="h-4 w-4" />
            <AlertTitle className="text-red-800 dark:text-red-300">
              Critical Health Alerts - Immediate Attention Required
            </AlertTitle>
            <AlertDescription className="text-red-700 dark:text-red-400">
              {getCriticalAthletes().length} athlete(s) have high-priority health concerns that need immediate review.
              <Button 
                variant="outline" 
                size="sm" 
                className="ml-4 border-red-300 text-red-800 hover:bg-red-100"
                data-testid="button-view-critical"
              >
                <Phone className="h-4 w-4 mr-2" />
                Contact Medical Staff
              </Button>
            </AlertDescription>
          </Alert>
        )}

        {/* Quick Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card className="bg-white dark:bg-gray-800">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-red-100 dark:bg-red-900/20 rounded-lg">
                  <AlertTriangle className="h-6 w-6 text-red-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">
                    {getActiveAlerts().filter(a => a.severity === 'critical' || a.severity === 'high').length}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-400">High Priority Alerts</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-white dark:bg-gray-800">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-yellow-100 dark:bg-yellow-900/20 rounded-lg">
                  <Activity className="h-6 w-6 text-yellow-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">
                    {healthData?.filter(a => a.performanceTrends.some(t => t.trendAnalysis.direction === 'declining')).length || 0}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Declining Performance</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-white dark:bg-gray-800">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-blue-100 dark:bg-blue-900/20 rounded-lg">
                  <Users className="h-6 w-6 text-blue-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">
                    {healthData?.length || 0}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-400">Athletes Monitored</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-white dark:bg-gray-800">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="p-2 bg-green-100 dark:bg-green-900/20 rounded-lg">
                  <CheckCircle2 className="h-6 w-6 text-green-600" />
                </div>
                <div>
                  <p className="text-2xl font-bold text-gray-900 dark:text-white">
                    {healthData?.filter(a => a.healthAlerts.every(alert => alert.resolvedDate)).length || 0}
                  </p>
                  <p className="text-sm text-gray-600 dark:text-gray-400">No Active Alerts</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Controls */}
        <div className="flex flex-wrap gap-4 mb-8">
          <div className="min-w-48">
            <Select value={selectedAthlete} onValueChange={setSelectedAthlete}>
              <SelectTrigger data-testid="select-athlete">
                <SelectValue placeholder="Select athlete" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Athletes</SelectItem>
                {healthData?.map((athlete) => (
                  <SelectItem key={athlete.id} value={athlete.id}>
                    {athlete.playerName} ({athlete.team})
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="min-w-32">
            <Select value={alertSeverity} onValueChange={setAlertSeverity}>
              <SelectTrigger data-testid="select-severity">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="critical">Critical Only</SelectItem>
                <SelectItem value="high">High Priority</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <Button
            variant={showResolved ? "default" : "outline"}
            onClick={() => setShowResolved(!showResolved)}
            data-testid="button-toggle-resolved"
          >
            {showResolved ? "Hide Resolved" : "Show Resolved"}
          </Button>
        </div>

        {/* Main Content */}
        <Tabs defaultValue="alerts" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="alerts">Active Alerts</TabsTrigger>
            <TabsTrigger value="trends">Performance Trends</TabsTrigger>
            <TabsTrigger value="recommendations">Recommendations</TabsTrigger>
          </TabsList>

          <TabsContent value="alerts" className="mt-8">
            <div className="space-y-4">
              {getActiveAlerts().map((alert) => {
                const athlete = healthData?.find(a => 
                  a.healthAlerts.some(ha => ha.alertId === alert.alertId)
                );
                
                return (
                  <Card key={alert.alertId} className="bg-white dark:bg-gray-800">
                    <CardContent className="p-6">
                      <div className="flex items-start justify-between">
                        <div className="flex items-start gap-4">
                          <div className="mt-1">
                            {getSeverityIcon(alert.severity)}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-2">
                              <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                                {athlete?.playerName} - {alert.alertType.replace('_', ' ').toUpperCase()}
                              </h3>
                              <Badge className={`${getSeverityColor(alert.severity)} border`}>
                                {alert.severity.toUpperCase()}
                              </Badge>
                            </div>
                            <p className="text-gray-600 dark:text-gray-400 mb-3">
                              {alert.description}
                            </p>
                            <div className="space-y-2">
                              <p className="text-sm font-medium text-gray-900 dark:text-white">
                                Recommended Actions:
                              </p>
                              <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                                {alert.recommendedActions.map((action, index) => (
                                  <li key={index} className="flex items-start gap-2">
                                    <span className="text-blue-600 mt-1">•</span>
                                    {action}
                                  </li>
                                ))}
                              </ul>
                            </div>
                          </div>
                        </div>
                        <div className="text-right">
                          <p className="text-xs text-gray-500 mb-2">
                            <Calendar className="h-3 w-3 inline mr-1" />
                            {new Date(alert.triggeredDate).toLocaleDateString()}
                          </p>
                          <Button
                            size="sm"
                            variant="outline"
                            data-testid={`button-resolve-${alert.alertId}`}
                          >
                            Mark Resolved
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
              
              {getActiveAlerts().length === 0 && (
                <Card className="bg-white dark:bg-gray-800">
                  <CardContent className="text-center py-12">
                    <CheckCircle2 className="h-16 w-16 text-green-500 mx-auto mb-4" />
                    <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
                      No Active Health Alerts
                    </h3>
                    <p className="text-gray-600 dark:text-gray-400">
                      All athletes are showing healthy performance patterns.
                    </p>
                  </CardContent>
                </Card>
              )}
            </div>
          </TabsContent>

          <TabsContent value="trends" className="mt-8">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {healthData?.map((athlete) => 
                athlete.performanceTrends.map((trend, index) => (
                  <Card key={`${athlete.id}-${index}`} className="bg-white dark:bg-gray-800">
                    <CardHeader>
                      <div className="flex items-center justify-between">
                        <div>
                          <CardTitle className="text-lg">
                            {athlete.playerName} - {trend.eventType}
                          </CardTitle>
                          <CardDescription>
                            {trend.sport} • Confidence: {trend.trendAnalysis.confidenceLevel}%
                          </CardDescription>
                        </div>
                        <div className="flex items-center gap-2">
                          {getTrendIcon(trend.trendAnalysis.direction)}
                          <Badge className={
                            trend.trendAnalysis.concernLevel === 'significant' 
                              ? 'bg-red-100 text-red-800'
                              : trend.trendAnalysis.concernLevel === 'moderate'
                              ? 'bg-yellow-100 text-yellow-800'
                              : 'bg-green-100 text-green-800'
                          }>
                            {trend.trendAnalysis.direction.toUpperCase()}
                          </Badge>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <div className="h-48 mb-4">
                        <ResponsiveContainer width="100%" height="100%">
                          <LineChart data={trend.measurements.slice(-10)}>
                            <CartesianGrid strokeDasharray="3 3" className="stroke-gray-200 dark:stroke-gray-700" />
                            <XAxis dataKey="date" className="text-gray-600 dark:text-gray-400" />
                            <YAxis className="text-gray-600 dark:text-gray-400" />
                            <Tooltip />
                            <Line 
                              type="monotone" 
                              dataKey="value" 
                              stroke={
                                trend.trendAnalysis.direction === 'improving' ? '#10b981' :
                                trend.trendAnalysis.direction === 'declining' ? '#ef4444' : 
                                '#6b7280'
                              }
                              strokeWidth={3}
                            />
                          </LineChart>
                        </ResponsiveContainer>
                      </div>
                      
                      {trend.trendAnalysis.autoGeneratedRecommendations && (
                        <div className="space-y-2">
                          <p className="text-sm font-medium text-gray-900 dark:text-white">
                            AI Recommendations:
                          </p>
                          <ul className="text-sm text-gray-600 dark:text-gray-400 space-y-1">
                            {trend.trendAnalysis.autoGeneratedRecommendations.map((rec, i) => (
                              <li key={i} className="flex items-start gap-2">
                                <span className="text-blue-600 mt-1">•</span>
                                {rec}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))
              )}
            </div>
          </TabsContent>

          <TabsContent value="recommendations" className="mt-8">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card className="bg-white dark:bg-gray-800">
                <CardHeader>
                  <CardTitle>Early Warning System</CardTitle>
                  <CardDescription>
                    Proactive health monitoring guidelines
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                    <h4 className="font-medium text-blue-900 dark:text-blue-100 mb-2">
                      Performance Decline Detection
                    </h4>
                    <p className="text-sm text-blue-800 dark:text-blue-200">
                      Monitor for 15%+ decline in performance metrics over 3 consecutive events. 
                      This can indicate fatigue, injury, or health issues requiring attention.
                    </p>
                  </div>
                  
                  <div className="p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
                    <h4 className="font-medium text-yellow-900 dark:text-yellow-100 mb-2">
                      Behavioral Changes
                    </h4>
                    <p className="text-sm text-yellow-800 dark:text-yellow-200">
                      Watch for unusual patterns in training attendance, energy levels, or 
                      participation enthusiasm that may signal underlying concerns.
                    </p>
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-white dark:bg-gray-800">
                <CardHeader>
                  <CardTitle>Action Protocol</CardTitle>
                  <CardDescription>
                    Response guidelines for health alerts
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="p-4 bg-red-50 dark:bg-red-900/20 rounded-lg">
                    <h4 className="font-medium text-red-900 dark:text-red-100 mb-2">
                      Critical Alerts
                    </h4>
                    <p className="text-sm text-red-800 dark:text-red-200">
                      Immediate medical consultation required. Contact parents/guardians 
                      and team physician within 24 hours.
                    </p>
                  </div>
                  
                  <div className="p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg">
                    <h4 className="font-medium text-orange-900 dark:text-orange-100 mb-2">
                      High Priority
                    </h4>
                    <p className="text-sm text-orange-800 dark:text-orange-200">
                      Schedule check-in conversation with athlete and consider reduced 
                      training load until patterns normalize.
                    </p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}